{"version":3,"sources":["componentes/AddCategoria.jsx","componentes/GrifGridItem.jsx","helpers/getGifs.js","componentes/GifGrid.jsx","hooks/useFetchGifs.js","componentes/GifExpertApp.jsx","index.js"],"names":["AddCategoria","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GrifGridItem","id","title","url","className","src","alt","getGifs","categoria","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAkB7C,OAEI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAe,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACrC,OACI,sBAAKC,UAAU,yCAAf,UAEI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEKG,MAAMR,GAFX,cAEbS,EAFa,gBAGEA,EAAUC,OAHZ,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QATtB,kBAaZY,GAbY,4CAAH,sDCOPK,EAAU,SAAC,GAAiB,IAAhBZ,EAAe,EAAfA,UAAe,ECJZ,SAACA,GAAe,IAAD,EACbrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAuBvC,OAdAC,qBAAU,WACNjB,EAAQC,GAAWiB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACrCT,KAAMY,EACNL,SAAS,SAEd,CAACb,IASGc,EDf0BK,CAAanB,GAAjCU,EAJuB,EAI7BJ,KAAcO,EAJe,EAIfA,QAErB,OACI,qCACI,6BAAKb,IACJa,GAAW,mBAAGjB,UAAU,oCAAb,0BACZ,qBAAKA,UAAU,YAAf,SAGQc,EAAOF,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEatB2B,EA9BM,WAAM,MAGazC,mBAAS,CAAC,cAHvB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KAUvB,OACI,gCACI,8CACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBACA,6BAEQ2C,EAAWb,KAAK,SAACR,GACb,OAAQ,cAAC,EAAD,CACJA,UAAWA,GACNA,YCnBjCsB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.8166ad9c.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategoria = ({setCategorias}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2 ){\n            setCategorias(cats => [inputValue, ...cats] );\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n         \n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n        \n    )\n}\n\nAddCategoria.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GrifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            {/* {img.title} */}\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","\nexport const getGifs = async (categoria) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=ot2vdtBWyGYWhX7ES67wWIZfozoNAHLH`\n    const respuesta = await fetch(url);\n    const {data} = await respuesta.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n","import React  from 'react'\nimport { GrifGridItem } from './GrifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n// import { getGifs } from '../helpers/getGifs';\n\n//Componentes\n\n\nexport const GifGrid = ({categoria}) => {\n\n    // const [count, setCount] = useState(0);\n\n    const {data: images, loading } = useFetchGifs(categoria);\n    \n    return (\n        <>\n            <h3>{categoria}</h3> \n            {loading && <p className=\" animate__animated animate__flash\">Cargando....</p>}\n            <div className=\"card-grid\">\n                \n                {\n                    images.map((img) => ( \n                        <GrifGridItem \n                            key={img.id}\n                            {...img} />\n                    ))\n                }\n                    \n                \n                {/* <p>{count}</p>\n                <button onClick={() => {setCount(count + 1)} }>Button</button> */}\n            </div>\n        </>\n    )\n}\n","import {useState, useEffect} from 'react'\nimport {getGifs} from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (categoria) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    //UseEffect recibe una funcion que quiero ejecutar como primer argumento\n    //El segundo argumento es una lista de dependencias(arreglo)\n    //Si se manda un arreglo vacio solo se ejecutaria una sola vez\n    useEffect(() => {\n        getGifs(categoria).then(imgs => setstate({\n            data: imgs,\n            loading: false\n        }))\n    }, [categoria])\n\n    // setTimeout(() => {\n    //     setstate({\n    //         data: [1,2,3,4,5,6],\n    //         loading: false\n    //     })\n    // }, 3000)\n\n    return state; // {data: [], loading: true}\n}","import React, {useState} from 'react';\nimport { AddCategoria } from './AddCategoria';\n\n//Componentes\nimport {GifGrid} from './GifGrid';\n\nconst GifExpertApp = () => {\n\n    //const categorias = ['One punch', 'One Piece', 'Dragon Ball']\n    const [categorias, setCategorias] = useState(['One Piece']);\n    // const handleAdd = () => {\n    //     // setCategorias([...categorias, 'Naruto'] );\n    //     setCategorias(cats => [...cats, 'naruto'] );\n    // }\n\n\n    return(\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategoria setCategorias={setCategorias}/>\n            <hr />\n            <ol>\n                {\n                    categorias.map( (categoria) => {\n                        return (<GifGrid \n                            categoria={categoria}\n                            key={categoria}/>\n                        )\n                    })\n                }\n            </ol>\n        </div>\n        \n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//Componentes\nimport GifExpertApp from './componentes/GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}